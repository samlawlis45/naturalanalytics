// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App relations
  organizations OrganizationMember[]
  queries       Query[]
  dashboards    Dashboard[]
  apiKeys       ApiKey[]
  subscriptions Subscription[]
  usage         Usage[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members       OrganizationMember[]
  dashboards    Dashboard[]
  apiKeys       ApiKey[]
  dataSources   DataSource[]
  subscriptions Subscription[]
  usage         Usage[]

  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole   @default(MEMBER)
  createdAt      DateTime     @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model DataSource {
  id             String   @id @default(cuid())
  name           String
  type           DataSourceType
  connectionString String
  organizationId String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  queries      Query[]

  @@map("data_sources")
}

model Query {
  id           String       @id @default(cuid())
  naturalQuery String       // The natural language query
  sqlQuery     String       // Generated SQL
  result       Json?        // Query results
  status       QueryStatus  @default(PENDING)
  executionTime Int?        // Execution time in ms
  userId       String
  dataSourceId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dataSource DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)

  @@map("queries")
}

model Dashboard {
  id             String   @id @default(cuid())
  name           String
  description    String?
  config         Json     // Dashboard configuration
  isPublic       Boolean  @default(false)
  userId         String
  organizationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@map("dashboards")
}

model ApiKey {
  id             String   @id @default(cuid())
  name           String
  key            String   @unique
  userId         String
  organizationId String?
  lastUsedAt     DateTime?
  createdAt      DateTime @default(now())
  expiresAt      DateTime?

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@map("api_keys")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  organizationId    String?
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeStatus      String?
  stripeCurrentPeriodEnd DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@map("subscriptions")
}

model Usage {
  id             String   @id @default(cuid())
  userId         String
  organizationId String?
  queryCount     Int      @default(0)
  apiCalls       Int      @default(0)
  month          Int
  year           Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@unique([userId, month, year])
  @@map("usage")
}

// Enums
enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum DataSourceType {
  POSTGRESQL
  MYSQL
  SQLITE
  BIGQUERY
  SNOWFLAKE
  REDSHIFT
}

enum QueryStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}